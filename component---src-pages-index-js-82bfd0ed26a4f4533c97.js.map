{"version":3,"sources":["webpack:///./src/components/tech-list.js","webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/components/_shared/styled-image-container.js","webpack:///./src/components/about.js","webpack:///./src/components/card-grid.js","webpack:///./src/components/contact.js","webpack:///./src/components/featured-projects.js","webpack:///./src/components/links/button-link.js","webpack:///./src/components/_shared/animation.js","webpack:///./src/components/scroll-indicator.js","webpack:///./src/components/hero.js","webpack:///./src/components/skewed-section.js","webpack:///./src/components/facts.js","webpack:///./src/components/recent-posts.js","webpack:///./src/pages/index.js","webpack:///./src/components/_shared/styled-content-link.js","webpack:///./src/components/_shared/styled-text-section.js"],"names":["StyledTechContainer","styled","section","StyledTag","span","TechList","techs","map","tech","key","icon","StyledTextLink","Link","flexCenter","TextLink","label","link","Fragment","to","StyledH1","h1","StyledH2","h2","StyledImageContainer","div","StyledStaticImageContainer","StyledAboutContainer","article","mq","gt","sm","StyledTextSection","About","data","frontmatter","title","about_image","html","image","childImageSharp","fluid","id","objectFit","dangerouslySetInnerHTML","__html","StyledFeatureGridContainer","xs","StyledFeatureCard","StyledCardLabel","StyledDivider","StyledFeatureDescription","p","CardGrid","cards","description","featureCards","index","prefix","StyledContactSection","StyledSection","StyledContainer","StyledFormContainer","StyledForm","StyledSeparator","StyledContacts","Contact","phone","email","address","StyledFeaturedProject","StyledProjectInfoContainer","StyledDescription","contentBox","StyledLinkContainer","flexEnd","StyledArchiveContainer","FeaturedProjects","featuredProjects","featured","project","coverImage","cover_image","demoLink","demo_link","repoLink","repo_link","demoLinkLabel","repoLinkLabel","aria-label","href","target","rel","hasHover","StyledButtonLink","a","ButtonLink","scroll","keyframes","StyledMouse","StyledScroller","StyledScrollText","ScrollIndicator","StyledHeroSection","StyledIntroduction","StyledAuthor","StyledTagline","Hero","introduction","author","tagline","ctaLink","ctaLabel","StyledSkewedSection","SkewedSection","props","className","children","defaultProps","angle","StyledLogoSection","StyledFactNumber","Facts","StyledPostsContainer","StyledPostContainer","StyledDateOverlay","StyledTitleLink","StyledBlogLinkContainer","StyledPostText","RecentPosts","recentPosts","post","node","tags","date","fields","slug","month","Date","toLocaleDateString","day","Index","heroData","site","siteMetadata","hero","cta_label","cta_link","menuLinks","indexMenuLinks","about","nodes","blog","edges","contact","StyledContentLink"],"mappings":"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","file":"component---src-pages-index-js-82bfd0ed26a4f4533c97.js","sourcesContent":["import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\n\nconst StyledTechContainer = styled.section`\n  margin-top: 0.8rem;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst StyledTag = styled.span`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  font-size: 0.8rem;\n\n  color: var(--body-color);\n  margin: 0 1rem 0.5rem 0;\n\n  & > svg {\n    color: var(--primary-color);\n    height: 0.8rem;\n    margin-right: 0.25rem;\n  }\n`;\n\nconst TechList = ({ techs }) => {\n  return (\n    <StyledTechContainer>\n      {techs.map((tech) => (\n        <StyledTag key={tech}>\n          <Icon icon=\"caret-right\" />\n          {tech}\n        </StyledTag>\n      ))}\n    </StyledTechContainer>\n  );\n};\n\nTechList.propTypes = {\n  techs: PropTypes.array.isRequired,\n};\n\nexport default TechList;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React from 'react';\nimport Icon from '../icon';\nimport { flexCenter } from './../_shared/styled-mixins';\n\nexport const StyledTextLink = styled(Link)`\n  ${flexCenter};\n  text-decoration: none;\n  font-size: 0.8rem;\n  font-weight: 500;\n  white-space: nowrap;\n  padding: 0.4rem 0.8rem;\n  color: var(--primary-color);\n\n  &:hover {\n    color: var(--secondary-color);\n    text-decoration: underline;\n  }\n\n  & > svg {\n    height: 0.8rem;\n    fill: currentColor;\n    margin-left: 0.25rem;\n    transition: margin-left var(--transition-fast) ease;\n  }\n\n  &:hover > svg {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst TextLink = ({ label, link }) => {\n  return (\n    <React.Fragment>\n      {label && link && (\n        <StyledTextLink to={link ? link : '#'}>\n          {label}\n          <Icon icon=\"arrow-right\" />\n        </StyledTextLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TextLink;\n","import styled from '@emotion/styled';\n\nexport const StyledH1 = styled.h1`\n  width: 100%;\n  position: relative;\n  font-weight: 800;\n  margin: 20px 0;\n\n  &:first-letter {\n    color: var(--primary-color);\n  }\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -30px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n\nexport const StyledH2 = styled.h2`\n  color: var(--title-color);\n  margin: 20px 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledImageContainer = styled.div`\n  min-width: 290px;\n  min-height: 200px;\n  position: relative;\n\n  & .gatsby-image-wrapper * {\n    transition: transform var(--transition-fast) ease-in-out !important;\n  }\n\n  &:hover .gatsby-image-wrapper * {\n    transform: scale(1.1);\n  }\n`;\n\nexport const StyledStaticImageContainer = styled.div`\n  min-width: 290px;\n  min-height: 200px;\n  position: relative;\n\n  .gatsby-image-wrapper {\n    overflow: unset !important;\n  }\n\n  .gatsby-image-wrapper:before {\n    content: '';\n    position: absolute;\n    bottom: -10px;\n    right: -10px;\n    width: 98%;\n    height: 98%;\n    border: 2px solid var(--primary-color);\n    transition: all ease var(--transition-fast);\n  }\n`;\n","import styled from '@emotion/styled';\nimport Img from 'gatsby-image';\nimport React from 'react';\nimport TechList from './tech-list';\nimport { mq } from './_shared/media';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledStaticImageContainer } from './_shared/styled-image-container';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledAboutContainer = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  padding: 2.5rem 0;\n\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n`;\n\nconst About = ({ data }) => {\n  const {\n    frontmatter: { title, techs, about_image },\n    html,\n  } = data;\n\n  const image = about_image ? about_image.childImageSharp.fluid : null;\n\n  return (\n    <StyledSection id=\"about\">\n      <StyledH1>About Me</StyledH1>\n      <StyledAboutContainer>\n        {image && (\n          <StyledStaticImageContainer>\n            <Img fluid={image} objectFit=\"contain\" />\n          </StyledStaticImageContainer>\n        )}\n        <div>\n          <StyledH2>{title}</StyledH2>\n          <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\n          <TechList techs={techs} />\n        </div>\n      </StyledAboutContainer>\n    </StyledSection>\n  );\n};\n\nAbout.propTypes = {};\n\nexport default About;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\nimport { mq } from './_shared/media';\nimport { StyledH1 } from './_shared/styled-headings';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n`;\nconst StyledFeatureGridContainer = styled.section`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  margin-top: 2.5rem;\n  width: 100%;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\nconst StyledFeatureCard = styled.article`\n  border: 1px solid var(--body-color);\n  border-radius: var(--radius);\n\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  min-height: 200px;\n  padding: 1rem;\n\n  & svg {\n    height: 2rem;\n    width: 2rem;\n    font-size: 2rem;\n  }\n`;\nconst StyledCardLabel = styled.h2`\n  font-size: 1.5rem;\n  margin: 1rem 0;\n  color: var(--body-color);\n`;\nconst StyledDivider = styled.div`\n  width: 15%;\n  height: 2px;\n  background-color: var(--primary-color);\n  margin-bottom: 1rem;\n`;\nconst StyledFeatureDescription = styled.p`\n  font-size: 0.8rem;\n`;\n\nconst CardGrid = ({ cards, description, title, id = null }) => {\n  const featureCards = cards.map(({ icon, prefix, label, description }, index) => {\n    return (\n      <StyledFeatureCard key={index}>\n        <Icon icon={icon} prefix={prefix} />\n        <StyledCardLabel>{label}</StyledCardLabel>\n        <StyledDivider></StyledDivider>\n        <StyledFeatureDescription>{description}</StyledFeatureDescription>\n      </StyledFeatureCard>\n    );\n  });\n\n  return (\n    <StyledSection id={id}>\n      {title && <StyledH1>{title}</StyledH1>}\n      <StyledTextSection dangerouslySetInnerHTML={{ __html: description }} />\n      <StyledFeatureGridContainer>{featureCards}</StyledFeatureGridContainer>\n    </StyledSection>\n  );\n};\n\nCardGrid.propTypes = {\n  cards: PropTypes.array.isRequired,\n  description: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  title: PropTypes.string,\n};\n\nexport default CardGrid;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Icon from './icon';\nimport { mq } from './_shared/media';\nimport { StyledH1 } from './_shared/styled-headings';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledContactSection = styled(StyledSection)`\n  margin-bottom: 70px;\n`;\nconst StyledContainer = styled.section`\n  display: flex;\n  align-items: center;\n\n  & > svg {\n    font-size: 2rem;\n    margin-right: 0.75rem;\n  }\n`;\nconst StyledFormContainer = styled.section`\n  & > span {\n    font-size: 0.75rem;\n    font-weight: 500;\n  }\n`;\nconst StyledForm = styled.div`\n  color: var(--primary-color);\n\n  font-weight: normal;\n`;\nconst StyledTextSection = styled.section`\n  white-space: pre-line;\n  width: 100%;\n  max-width: 500px;\n  margin-left: 3px;\n`;\nconst StyledSeparator = styled.div`\n  height: 1px;\n  width: 50%;\n  background-color: var(--body-color);\n`;\nconst StyledContacts = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 30px;\n  width: 100%;\n  margin-top: 2rem;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`;\n\nconst Contact = ({ data }) => {\n  const {\n    frontmatter: { phone, email, address },\n    html,\n  } = data;\n\n  return (\n    <React.Fragment>\n      <StyledContactSection id=\"contact\">\n        <StyledH1>Contact Details</StyledH1>\n        <StyledTextSection dangerouslySetInnerHTML={{ __html: html }} />\n        <StyledSeparator />\n        <StyledContacts>\n          {address && (\n            <StyledContainer>\n              <Icon icon=\"building\" />\n              <StyledFormContainer>\n                <StyledForm>Office Location</StyledForm>\n                <span>{address}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )}\n          {email && (\n            <StyledContainer>\n              <Icon icon=\"paper-plane\" />\n              <StyledFormContainer>\n                <StyledForm>My E-Mail</StyledForm>\n                <span>{email}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )}\n          {phone && (\n            <StyledContainer>\n              <Icon icon=\"mobile-alt\" />\n              <StyledFormContainer>\n                <StyledForm>Phone Number</StyledForm>\n                <span>{phone}</span>\n              </StyledFormContainer>\n            </StyledContainer>\n          )}\n        </StyledContacts>\n      </StyledContactSection>\n    </React.Fragment>\n  );\n};\n\nexport default Contact;\n","import styled from '@emotion/styled';\nimport Img from 'gatsby-image';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Icon from './icon';\nimport TextLink from './links/text-link';\nimport TechList from './tech-list';\nimport { mq } from './_shared/media';\nimport { StyledContentLink } from './_shared/styled-content-link';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledImageContainer } from './_shared/styled-image-container';\nimport { contentBox, flexCenter, flexEnd } from './_shared/styled-mixins';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledFeaturedProject = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  padding: 2.5rem 0;\n\n  ${mq.gt.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  &:nth-of-type(even) {\n    direction: rtl;\n  }\n  &:nth-of-type(even) * {\n    direction: ltr;\n  }\n`;\nconst StyledProjectInfoContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\nconst StyledDescription = styled.section`\n  ${contentBox}\n  max-height: 180px;\n  position: relative;\n  padding: 10px;\n\n  > p {\n    height: 100%;\n    margin: 0;\n    font-size: 0.8rem;\n    overflow: hidden;\n  }\n`;\nconst StyledLinkContainer = styled.section`\n  ${flexEnd};\n  margin: 10px 0;\n\n  & > a {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--body-color);\n\n    &:hover {\n      color: var(--primary-color);\n    }\n  }\n\n  & svg {\n    margin: 0 0.5rem;\n  }\n`;\nconst StyledArchiveContainer = styled.div`\n  ${flexCenter};\n  width: 100%;\n  margin-top: 2.5rem;\n`;\n\nconst FeaturedProjects = ({ featured }) => {\n  const featuredProjects = featured.map((project, index) => {\n    const coverImage = project.frontmatter.cover_image ? project.frontmatter.cover_image.childImageSharp.fluid : null;\n\n    const title = project.frontmatter.title;\n    const demoLink = project.frontmatter.demo_link;\n    const repoLink = project.frontmatter.repo_link;\n    const demoLinkLabel = `featured project ${title} demo`;\n    const repoLinkLabel = `featured project ${title} repo`;\n\n    return (\n      <StyledFeaturedProject key={title + index}>\n        <a\n          aria-label={demoLink ? demoLinkLabel : repoLink ? repoLinkLabel : `featured project ${title}`}\n          href={demoLink ? demoLink : repoLink ? repoLink : '#'}\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          {coverImage && (\n            <StyledImageContainer hasHover>\n              <Img fluid={coverImage} />\n            </StyledImageContainer>\n          )}\n        </a>\n        <StyledProjectInfoContainer>\n          <StyledContentLink href={demoLink ? demoLink : repoLink ? repoLink : '#'} target=\"_blank\" rel=\"noopener\">\n            <StyledH2>{title}</StyledH2>\n          </StyledContentLink>\n          <StyledDescription dangerouslySetInnerHTML={{ __html: project.html }} />\n          <TechList techs={project.frontmatter.techs} />\n          <StyledLinkContainer>\n            {repoLink && (\n              <a href={repoLink} target=\"_blank\" rel=\"noopener\" title=\"Repository Link\" aria-label={repoLinkLabel}>\n                <Icon icon=\"github\" prefix=\"fab\" />\n              </a>\n            )}\n            {demoLink && (\n              <a href={demoLink} target=\"_blank\" rel=\"noopener\" title=\"Demo Link\" aria-label={demoLinkLabel}>\n                <Icon icon=\"external-link-alt\" />\n              </a>\n            )}\n          </StyledLinkContainer>\n        </StyledProjectInfoContainer>\n      </StyledFeaturedProject>\n    );\n  });\n\n  return (\n    <StyledSection id=\"projects\">\n      <StyledH1>Featured Projects</StyledH1>\n      {featuredProjects}\n      <StyledArchiveContainer>\n        <TextLink label=\"View More Projects\" link=\"/projects\" />\n      </StyledArchiveContainer>\n    </StyledSection>\n  );\n};\n\nFeaturedProjects.propTypes = {\n  featured: PropTypes.array.isRequired,\n};\n\nexport default FeaturedProjects;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport Icon from '../icon';\nimport { flexCenter } from './../_shared/styled-mixins';\n\nexport const StyledButtonLink = styled.a`\n  ${flexCenter};\n  text-decoration: none;\n  color: var(--bg-content-color) !important;\n  background-color: var(--title-color);\n  font-size: 0.9rem;\n  font-weight: 500;\n  white-space: nowrap;\n  position: relative;\n  border: none;\n  padding: 0.4rem 0.8rem;\n\n  &:hover {\n    color: var(--primary-color) !important;\n  }\n\n  &:after {\n    content: '';\n    z-index: -1;\n    border: 1px solid var(--title-color);\n    position: absolute;\n    bottom: -3px;\n    right: -3px;\n    width: 100%;\n    height: 100%;\n    transition: all ease var(--transition-fast);\n  }\n\n  &:hover:after {\n    border: 1px solid var(--primary-color);\n    bottom: -5px;\n    right: -5px;\n  }\n\n  & > svg {\n    fill: var(--bg-content-color);\n    height: 0.8rem;\n    margin-left: 0.25rem;\n  }\n\n  &:hover > svg {\n    fill: var(--primary-color);\n  }\n`;\n\nconst ButtonLink = ({ label, link }) => {\n  return (\n    <React.Fragment>\n      {label && link && (\n        <StyledButtonLink href={link ? link : '#'} target=\"_blank\" rel=\"noopener\">\n          {label}\n          <Icon icon=\"arrow-right\" />\n        </StyledButtonLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ButtonLink;\n","import { keyframes } from '@emotion/core'\n\nexport const scroll = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  10% {\n    transform: translateY(0);\n    opacity: 1;\n  }\n\n  100% {\n    transform: translateY(10px);\n    opacity: 0;\n  }\n`;","import styled from '@emotion/styled';\nimport React from 'react';\nimport { scroll } from './_shared/animation';\nimport { mq } from './_shared/media';\nimport { flexCenter } from './_shared/styled-mixins';\n\nconst StyledContainer = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 0;\n  right: 0;\n  width: 100%;\n  ${flexCenter};\n  flex-direction: column;\n\n  display: none;\n\n  ${mq.gt.xs} {\n    display: flex;\n  }\n`;\nconst StyledMouse = styled.div`\n  width: 20px;\n  height: 30px;\n  padding: 0 6px;\n  border: 2px solid #fff;\n  border-radius: 20px;\n`;\nconst StyledScroller = styled.div`\n  position: relative;\n  left: 50%;\n  top: 6px;\n  margin-left: -1px;\n  width: 2px;\n  height: 6px;\n  background: var(--primary-color);\n  border-radius: 25%;\n  animation-name: ${scroll};\n  animation-duration: 2.2s;\n  animation-timing-function: cubic-bezier(0.15, 0.41, 0.69, 0.94);\n  animation-iteration-count: infinite;\n`;\nconst StyledScrollText = styled.span`\n  font-size: 0.7rem;\n  margin: 20px 0;\n`;\n\nconst ScrollIndicator = () => {\n  return (\n    <StyledContainer>\n      <StyledScrollText>Scroll down</StyledScrollText>\n      <StyledMouse>\n        <StyledScroller />\n      </StyledMouse>\n    </StyledContainer>\n  );\n};\n\nScrollIndicator.propTypes = {};\n\nexport default ScrollIndicator;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ButtonLink from './links/button-link';\nimport ScrollIndicator from './scroll-indicator';\nimport { mq } from './_shared/media';\nimport { StyledSection } from './_shared/styled-section';\n\nconst StyledHeroSection = styled(StyledSection)`\n  min-height: calc(100vh - 2 * var(--header-height));\n  position: relative;\n\n  ${mq.gt.sm} {\n    min-height: calc(100vh - var(--header-height));\n  }\n`;\nconst StyledIntroduction = styled.div`\n  color: var(--primary-color);\n  font-weight: normal;\n`;\nconst StyledAuthor = styled.h1`\n  margin-left: -4px !important;\n  font-size: 40px;\n  line-height: 1.1;\n  margin: 0;\n  word-break: break-word;\n\n  ${mq.gt.xs} {\n    font-size: 80px;\n  }\n`;\nconst StyledTagline = styled.h2`\n  margin-left: -4px !important;\n  font-size: 40px;\n  line-height: 1.1;\n  margin: 0;\n  color: var(--primary-color);\n  word-break: break-word;\n\n  ${mq.gt.xs} {\n    font-size: 80px;\n  }\n`;\nconst StyledDescription = styled.div`\n  margin-top: 0.5rem;\n  width: 100%;\n  max-width: 500px;\n`;\n\nconst Hero = ({ data }) => {\n  const { introduction, author, tagline, description, ctaLink, ctaLabel } = data;\n\n  return (\n    <StyledHeroSection>\n      <StyledIntroduction>{introduction}</StyledIntroduction>\n      <StyledAuthor>{author}</StyledAuthor>\n      <StyledTagline>{tagline}</StyledTagline>\n      <StyledDescription dangerouslySetInnerHTML={{ __html: description }} />\n      <ButtonLink label={ctaLabel} link={ctaLink} />\n      <ScrollIndicator />\n    </StyledHeroSection>\n  );\n};\n\nHero.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Hero;\n","import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst skewNumber = 0.09719;\nconst StyledSkewedSection = styled.section`\n  margin: 6rem 0;\n  position: relative;\n  padding: calc(100% * ${skewNumber}) 0;\n\n  & > .content {\n    max-width: 1000px;\n    margin: 0 auto;\n    padding: 1.5em;\n    position: relative;\n\n    /* uncomment for debuggind purposes */\n    /* border: 2px dashed #fff8; */\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n    transform: skewy(-11deg);\n    transform-origin: 50% 0;\n    outline: 1px solid transparent;\n    backface-visibility: hidden;\n    background-color: var(--bg-content-color);\n  }\n`;\n\n// x = tan(α) * a / 2\n\nconst SkewedSection = (props) => {\n  return (\n    <StyledSkewedSection>\n      <div className=\"content\">{props.children}</div>\n    </StyledSkewedSection>\n  );\n};\n\nSkewedSection.propTypes = {\n  angle: PropTypes.number,\n};\n\nSkewedSection.defaultProps = {\n  angle: 10,\n};\n\nexport default SkewedSection;\n","import styled from '@emotion/styled';\nimport React from 'react';\nimport StyledSkewedSection from './skewed-section';\nimport { StyledH1 } from './_shared/styled-headings';\n\nconst StyledLogoSection = styled.section`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nconst StyledFactNumber = styled.section`\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n\n  & > .number {\n    margin-left: 2rem;\n    margin-bottom: 1rem;\n    font-size: 2rem;\n    font-weight: bold;\n  }\n\n  & > .fact {\n    position: relative;\n    text-transform: uppercase;\n    font-size: 0.8rem;\n    padding: 0.5rem 1rem;\n    background-color: var(--bg-color);\n    margin-left: 2rem;\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 50%;\n      left: -2rem;\n      width: 1rem;\n      height: 2px;\n      background-color: var(--primary-color);\n    }\n  }\n`;\n\nconst Facts = () => {\n  return (\n    <StyledSkewedSection angle={10}>\n      <StyledH1>Some Interesting Facts</StyledH1>\n      <StyledLogoSection>\n        <StyledFactNumber>\n          <span className=\"number\">127</span>\n          <span className=\"fact\">Finished Projects</span>\n        </StyledFactNumber>\n        <StyledFactNumber>\n          <span className=\"number\">321</span>\n          <span className=\"fact\">Happy Customers</span>\n        </StyledFactNumber>\n        <StyledFactNumber>\n          <span className=\"number\">863</span>\n          <span className=\"fact\">Freelancing Hours</span>\n        </StyledFactNumber>\n      </StyledLogoSection>\n    </StyledSkewedSection>\n  );\n};\n\nexport default Facts;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TextLink from './links/text-link';\nimport TagList from './tag-list';\nimport { mq } from './_shared/media';\nimport { StyledH1, StyledH2 } from './_shared/styled-headings';\nimport { StyledImageContainer } from './_shared/styled-image-container';\nimport { flexCenter } from './_shared/styled-mixins';\nimport { StyledSection } from './_shared/styled-section';\nimport { StyledTextSection } from './_shared/styled-text-section';\n\nconst StyledPostsContainer = styled.article`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 2.5rem;\n  margin-top: 2.5rem;\n\n  ${mq.gt.xs} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\nconst StyledPostContainer = styled.article`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  border-radius: var(--radius);\n\n  & .gatsby-image-wrapper {\n    max-height: 300px;\n  }\n`;\nconst StyledDateOverlay = styled.div`\n  pointer-events: none;\n  z-index: 1;\n  position: absolute;\n  top: 0.5rem;\n  left: 0.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  height: 3rem;\n  width: 3rem;\n  color: var(--title-color);\n  background: var(--bg-code);\n  align-items: center;\n  border-radius: var(--radius);\n  font-weight: 500;\n  line-height: 1rem;\n`;\nconst StyledTitleLink = styled(Link)`\n  text-decoration: none;\n\n  &:hover h2 {\n    color: var(--primary-color);\n  }\n`;\nconst StyledBlogLinkContainer = styled.div`\n  ${flexCenter};\n  width: 100%;\n  margin-top: 2.5rem;\n`;\nconst StyledPostText = styled(StyledTextSection)`\n  > p {\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 4;\n    overflow: hidden;\n  }\n`;\n\nconst RecentPosts = ({ data }) => {\n  const recentPosts = data.map((post) => {\n    const { title, tags, description, date } = post.node.frontmatter;\n    const coverImage = post.node.frontmatter.cover_image\n      ? post.node.frontmatter.cover_image.childImageSharp.fluid\n      : null;\n\n    const link = `/blog` + post.node.fields.slug;\n\n    const month = new Date(date).toLocaleDateString('en-EN', { month: 'short' });\n    const day = new Date(date).toLocaleDateString('en-EN', { day: '2-digit' });\n\n    return (\n      <StyledPostContainer key={title}>\n        <StyledDateOverlay>\n          <span>{month}</span>\n          <span>{day}</span>\n        </StyledDateOverlay>\n        <Link to={link} aria-label={`recent post ${title}`}>\n          <StyledImageContainer>{coverImage && <Img fluid={coverImage} />}</StyledImageContainer>\n        </Link>\n        <TagList tags={tags} />\n        <StyledTitleLink to={link}>\n          <StyledH2>{title}</StyledH2>\n        </StyledTitleLink>\n        <StyledPostText>\n          <p>{description}</p>\n        </StyledPostText>\n      </StyledPostContainer>\n    );\n  });\n\n  return (\n    <StyledSection id=\"blog\">\n      <StyledH1>Latest Blog Posts</StyledH1>\n      <StyledPostsContainer>{recentPosts}</StyledPostsContainer>\n      <StyledBlogLinkContainer>\n        <TextLink label=\"View All Posts\" link=\"/blog\" />\n      </StyledBlogLinkContainer>\n    </StyledSection>\n  );\n};\n\nRecentPosts.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default RecentPosts;\n","import { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport About from '../components/about';\nimport CardGrid from '../components/card-grid';\nimport Contact from '../components/contact';\nimport FeaturedProjects from '../components/featured-projects';\nimport Hero from '../components/hero';\nimport Facts from '../components/facts';\nimport Layout from '../components/layout';\nimport RecentPosts from '../components/recent-posts';\nimport SEO from '../components/seo';\nimport { indexMenuLinks } from '../components/_config/menu-links';\n\nconst Index = ({ data }) => {\n  const heroData = {\n    author: data.site.siteMetadata.author,\n    tagline: data.hero.frontmatter.tagline,\n    description: data.hero.html,\n    introduction: data.hero.frontmatter.introduction,\n    ctaLabel: data.hero.frontmatter.cta_label,\n    ctaLink: data.hero.frontmatter.cta_link,\n  };\n\n  return (\n    <Layout menuLinks={indexMenuLinks}>\n      <SEO title=\"Home\" />\n      <Hero data={heroData} />\n      <Facts/>\n      <About data={data.about} />\n      <CardGrid cards={data.cards.frontmatter.cards} description={data.cards.html} title=\"Our Features\" id=\"features\" />\n      <FeaturedProjects featured={data.featuredProjects.nodes} />\n      <RecentPosts data={data.blog.edges} />\n      <Contact data={data.contact} />\n    </Layout>\n  );\n};\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Index;\n\nexport const query = graphql`\n  {\n    site {\n      siteMetadata {\n        author\n      }\n    }\n\n    hero: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/hero/\" }) {\n      frontmatter {\n        introduction\n        tagline\n        cta_label\n        cta_link\n      }\n      html\n    }\n\n    about: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/about/\" }) {\n      frontmatter {\n        title\n        techs\n        about_image {\n          childImageSharp {\n            fluid(maxWidth: 800) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n      html\n    }\n\n    cards: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/cards/\" }) {\n      frontmatter {\n        cards {\n          label\n          icon\n          prefix\n          description\n        }\n      }\n      html\n    }\n\n    featuredProjects: allMarkdownRemark(\n      limit: 3\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { fileAbsolutePath: { regex: \"/content/projects/\" }, frontmatter: { featured: { eq: true } } }\n    ) {\n      nodes {\n        frontmatter {\n          date(formatString: \"D MMMM, YYYY\")\n          title\n          repo_link\n          demo_link\n          techs\n          cover_image {\n            childImageSharp {\n              fluid(maxWidth: 800) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n        html\n      }\n    }\n\n    blog: allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      limit: 4\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" }, frontmatter: { published: { ne: false } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            tags\n            date(formatString: \"D MMMM, YYYY\")\n            description\n            cover_image {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            slug\n          }\n        }\n      }\n    }\n\n    contact: markdownRemark(fileAbsolutePath: { regex: \"/content/sections/contact/\" }) {\n      frontmatter {\n        phone\n        email\n        address\n      }\n      html\n    }\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledContentLink = styled.a`\n  text-decoration: none;\n\n  &:hover > * {\n    cursor: pointer;\n    color: var(--primary-color);\n  }\n`;\n","import styled from '@emotion/styled';\nimport { contentBox } from './styled-mixins';\n\nexport const StyledTextSection = styled.section`\n  white-space: pre-line;\n\n  ${contentBox}\n  max-width: unset;\n  max-height: 180px;\n  position: relative;\n  padding: 10px;\n  margin: 0;\n\n  > p {\n    height: 100%;\n    margin: 0;\n    font-size: 0.8rem;\n    overflow: hidden;\n  }\n`;\n"],"sourceRoot":""}
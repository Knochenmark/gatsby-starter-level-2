{"version":3,"sources":["webpack:///./src/components/_shared/styled-separator.js","webpack:///./src/components/links/text-link.js","webpack:///./src/components/_shared/styled-headings.js","webpack:///./src/pages/tags.js"],"names":["StyledSeparator","styled","div","StyledTextLink","Link","flexCenter","TextLink","label","link","Fragment","to","icon","StyledH1","h1","StyledH2","h2","StyledTagsH1","StyledTagLinkContainer","flexWrap","StyledTagLink","TagsPage","group","data","allMarkdownRemark","alphabet","React","useState","split","existingTagsWithAlphabet","setExistingTagsWithAlphabet","tagCount","Object","values","length","useEffect","findExistingTags","forEach","char","regex","RegExp","filtered","filter","tag","test","fieldValue","map","tags","totalCount","elems","entries","key","toUpperCase","i","count","menuLinks","blogMenuLinks","title"],"mappings":"kTAEO,IAAMA,E,UAAkBC,EAAOC,IAAV,M,koBCIrB,IAAMC,EAAiBF,YAAOG,OAAPH,CAAH,IACvBI,KAsCWC,IAbE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACzB,OACE,kBAAC,IAAMC,SAAP,KACGF,GAASC,GACR,kBAACL,EAAD,CAAgBO,GAAIF,GAAc,KAC/BD,EACD,kBAAC,IAAD,CAAMI,KAAK,oB,o0BCpCd,IAAMC,EAAWX,IAAOY,GAAV,KAqBRC,EAAWb,IAAOc,GAAV,M,2cCVrB,IAAMC,EAAef,YAAOW,IAAPX,CAAH,KAGZgB,EAAyBhB,IAAOC,IAAV,IACxBgB,KAEEC,EAAgBlB,YAAOG,OAAPH,CAAH,KAgFJmB,UA5EE,SAAC,GAIX,IAFkBC,EAEnB,EAHJC,KACEC,kBAAqBF,MAGhBG,EAAYC,IAAMC,SAAS,6BAA6BC,MAAM,KADjE,KAE4DF,IAAMC,SAAS,IAAxEE,EAFH,KAE6BC,EAF7B,KAIEC,EAAWC,OAAOC,OAAOJ,GAA0BK,OAEzDR,IAAMS,WAAU,WACd,IAAIC,EAAmB,GACvBX,EAASY,SAAQ,SAACC,GAChB,IAAIC,EAAQ,IAAIC,OAAJ,IAAeF,EAAQ,KAC/BG,EAAWnB,EAAMoB,QAAO,SAACC,GAC3B,OAAOJ,EAAMK,KAAKD,EAAIE,eAGpBJ,EAASP,OAAS,IACpBE,EAAiBE,GAAQ,GACzBF,EAAiBE,GAAjB,KAAiCG,EAASK,KAAI,SAACC,GAAD,OAAUA,EAAKF,cAC7DT,EAAiBE,GAAjB,MAAkCG,EAASK,KAAI,SAACC,GAAD,OAAUA,EAAKC,kBAGlElB,EAA4BM,KAC3B,IAEH,IAAIa,EAAQjB,OAAOkB,QAAQrB,GAA0BiB,KAAI,YAAmB,IAAjBR,EAAgB,KAAVf,EAAU,KACzE,OACE,yBAAK4B,IAAKb,GACR,4BAAKA,EAAKc,eACV,kBAAClC,EAAD,KACGK,EAAKwB,KAAKD,KAAI,SAACH,EAAKU,GACnB,OACE,kBAACjC,EAAD,CAAe+B,IAAKR,EAAMU,EAAG1C,GAAE,SAAWgC,EAAX,KAC5BA,EACA,IAFH,IAEcpB,EAAK+B,MAAMD,GAFzB,aAWZ,OACE,kBAAC,IAAD,CAAQE,UAAWC,KACjB,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAAC,IAAD,KACE,kBAACxC,EAAD,cAAqBc,EAArB,KACA,kBAAC,IAAD,MACCA,GAAYkB,EACb,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAUzC,MAAM,eAAeC,KAAK","file":"component---src-pages-tags-js-a2cc7cc1f89a84213aad.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledSeparator = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 3rem;\n  background-color: var(--body-color);\n`;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React from 'react';\nimport Icon from '../icon';\nimport { flexCenter } from './../_shared/styled-mixins';\n\nexport const StyledTextLink = styled(Link)`\n  ${flexCenter};\n  text-decoration: none;\n  font-size: 0.8rem;\n  font-weight: 500;\n  white-space: nowrap;\n  padding: 0.4rem 0.8rem;\n  color: var(--primary-color);\n\n  &:hover {\n    color: var(--secondary-color);\n    text-decoration: underline;\n  }\n\n  & > svg {\n    height: 0.8rem;\n    fill: currentColor;\n    margin-left: 0.25rem;\n    transition: margin-left var(--transition-fast) ease;\n  }\n\n  &:hover > svg {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst TextLink = ({ label, link }) => {\n  return (\n    <React.Fragment>\n      {label && link && (\n        <StyledTextLink to={link ? link : '#'}>\n          {label}\n          <Icon icon=\"arrow-right\" />\n        </StyledTextLink>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TextLink;\n","import styled from '@emotion/styled';\n\nexport const StyledH1 = styled.h1`\n  width: 100%;\n  position: relative;\n  font-weight: 800;\n  margin: 20px 0;\n\n  &:first-letter {\n    color: var(--primary-color);\n  }\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -30px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n\nexport const StyledH2 = styled.h2`\n  color: var(--title-color);\n  margin: 20px 0;\n  position: relative;\n\n  &:after {\n    background-color: var(--primary-color);\n    content: '';\n    position: absolute;\n    top: -20px;\n    left: 0;\n    width: 30px;\n    height: 2px;\n  }\n`;\n","import styled from '@emotion/styled';\nimport { graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Layout from '../components/layout';\nimport TextLink from '../components/links/text-link';\nimport SEO from '../components/seo';\nimport { blogMenuLinks } from '../components/_config/menu-links';\nimport { StyledH1 } from '../components/_shared/styled-headings';\nimport { flexWrap } from '../components/_shared/styled-mixins';\nimport { StyledFullHeightSection } from '../components/_shared/styled-section';\nimport { StyledSeparator } from '../components/_shared/styled-separator';\n\nconst StyledTagsH1 = styled(StyledH1)`\n  margin-top: 3rem;\n`;\nconst StyledTagLinkContainer = styled.div`\n  ${flexWrap};\n`;\nconst StyledTagLink = styled(Link)`\n  margin: 0.8rem;\n`;\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n  },\n}) => {\n  const [alphabet] = React.useState('abcdefghijklmnopqrstuvwxyz'.split(''));\n  const [existingTagsWithAlphabet, setExistingTagsWithAlphabet] = React.useState({});\n\n  const tagCount = Object.values(existingTagsWithAlphabet).length;\n\n  React.useEffect(() => {\n    let findExistingTags = {};\n    alphabet.forEach((char) => {\n      let regex = new RegExp(`^${char}`, 'i');\n      let filtered = group.filter((tag) => {\n        return regex.test(tag.fieldValue);\n      });\n\n      if (filtered.length > 0) {\n        findExistingTags[char] = {};\n        findExistingTags[char]['tags'] = filtered.map((tags) => tags.fieldValue);\n        findExistingTags[char]['count'] = filtered.map((tags) => tags.totalCount);\n      }\n    });\n    setExistingTagsWithAlphabet(findExistingTags);\n  }, []);\n\n  let elems = Object.entries(existingTagsWithAlphabet).map(([char, data]) => {\n    return (\n      <div key={char}>\n        <h3>{char.toUpperCase()}</h3>\n        <StyledTagLinkContainer>\n          {data.tags.map((tag, i) => {\n            return (\n              <StyledTagLink key={tag + i} to={`/tags/${tag}/`}>\n                {tag}\n                {'\\u00a0'}({data.count[i]})\n              </StyledTagLink>\n            );\n          })}\n        </StyledTagLinkContainer>\n      </div>\n    );\n  });\n\n  return (\n    <Layout menuLinks={blogMenuLinks}>\n      <SEO title=\"Tags\" />\n      <StyledFullHeightSection>\n        <StyledTagsH1>Tags ({tagCount})</StyledTagsH1>\n        <StyledSeparator />\n        {tagCount && elems}\n        <StyledSeparator />\n        <TextLink label=\"Take me home\" link=\"/\" />\n      </StyledFullHeightSection>\n    </Layout>\n  );\n};\n\nTagsPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      group: PropTypes.arrayOf(\n        PropTypes.shape({\n          fieldValue: PropTypes.string.isRequired,\n          totalCount: PropTypes.number.isRequired,\n        }).isRequired\n      ),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n};\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content/posts/\" }, frontmatter: { published: { eq: true } } }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}